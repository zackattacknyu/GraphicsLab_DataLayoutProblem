//Data structure
 
Access requirement:
-        Doubly-linked list AR: head, tail
-        AR node: ID, position, prev, next
 
Data unit entity: ID, position, list of ARs use it
 
position findMincut (position1, position2)
	/*
	For this we will definitely use an integer array
		as it has the best possible running time
		for this sort of task. 
	The integer array idea will definitely beat an interval tree
		and since we already have to go through all the data
		to construct an interval tree, so another pass through
		to construct the integer array required for this won't cost
		anything theoretically.
	*/
	return position with the minimum number of cuts
	
number getLengthOfAdjacentUnitsHead(AccessRequirement T)
	length = 0
	start = T.head
	end = T.head.next
	while end.position – start.position = 1 //seems to measure number of adjacent units in the beginning of the AR
		length = length + 1
		start = start.next
		end = end.next
	return length,start,end
 
//Main algorithm
for each Access Requirement P
//first analyze head node
	//group adjacent units
	length,start,end = getLengthOfAdjacentUnitsHead(P)
	//this ends up being length between next data unit and the head. that is the potential that can be saved.
	potential = end.position – P.head.position - length
	//we are finding the best position between the "end" node and the tail of the access requirement.
	//putting the nodes before the end might reduce seek time, but we would reduce it better by putting it after the "end" node
	destination = findMincut(end.position, P.tail.position)
	benefit = potential
	//calculate cost to other ARs
	for each other AR uses the data units P.head to (P.head + length), T
		if P.head is T.head //in this case, they will both benefit
			T.length,T.start,T.end = getLengthOfAdjacentUnitsHead(T);
			//this gets us the benefit that we can guarantee, hence the min part
			benefit = benefit + min(potential, T.end.position – T.start.position)
			chooseNewCopy
		//in this case, we will definitely want the old copy
		else if any of the nodes in P.head to (P.head+length) is T.tail
			chooseOldCopy
		else
			//decide which copy to use in T
			if P.head is T.head.next
			{
				//difference1 is future benefit from using the new copy for T
				difference1 = P.end.position – P.start.position
				if destination > T.tail.prev.position
					//difference2 is future penalty from using the new copy for T
					difference2 = destination + length - T.tail.prev.position
					/* TODO: Figure out whether to consider P.length or T.length
					*/
				else
					difference2 = 0
				
				if difference1 > difference2
					chooseNewCopy
				else
					chooseOldCopy
			}
			else
				chooseOldCopy
			
	if no one chooseOldCopy
		discard P.head
		for each AR, A
			if A.head.position < P.head.position AND A.tail.position > start.postion
				//by discarding, for each AR covering it, this is the benefit of deleting that data unit
				benefit = benefit + P.length
	//add info to priority queue
	enQueue(P.head, length, destination, benefit)
 
//Execution
(Node, length, destination) <- deQueue
Copy Node up to length to destination
Update links for all Ts chooseNewCopy
Update benefit for all Ps cover destination up to length
If Node is discard
	Update benefit for all Ps cover Node up to length
Reform Heap

/*
TODO: Update the above to reflect the benefit from updating the tail
Before you do the execution, make sure both the head and tail are updated
*/

